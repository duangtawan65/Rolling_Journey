from __future__ import annotations
import os, json, re
from dataclasses import dataclass, asdict
from typing import List, Dict, Any, Optional
from roll.rules import clamp
from dotenv import load_dotenv
try:
    from groq import Groq
except Exception:
    Groq = None

load_dotenv()     

# ===================== ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏£‡∏≠‡∏°‡∏ï‡πå GM =====================

SCENE_TITLES = [
    None,  # index 0 ‡πÄ‡∏ß‡πâ‡∏ô‡πÑ‡∏ß‡πâ
    "‡∏ñ‡∏ô‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô",
    "‡∏ï‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô",
    "‡∏ö‡πâ‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏´‡∏ç‡πà‡∏ö‡πâ‡∏≤‡∏ô",
    "‡∏ß‡∏±‡∏î‡∏õ‡πà‡∏≤‡∏ó‡πâ‡∏≤‡∏¢‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô",
    "‡∏™‡∏∏‡∏™‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ß‡∏±‡∏î",
    "‡∏ó‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏û‡∏¥‡∏ò‡∏µ",
    "‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÇ‡∏ö‡∏£‡∏≤‡∏ì‡πÉ‡∏ï‡πâ‡∏ö‡∏≤‡∏î‡∏≤‡∏•",
    "‡∏ñ‡πâ‡∏≥‡∏•‡∏±‡∏ö‡πÉ‡∏ï‡πâ‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÇ‡∏ö‡∏£‡∏≤‡∏ì",
    "‡∏≠‡∏∏‡πÇ‡∏°‡∏á‡∏Ñ‡πå‡∏´‡∏ô‡∏µ",
    "‡∏õ‡∏≤‡∏Å‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡∏´‡∏∏‡∏ö‡πÄ‡∏Ç‡∏≤",
]

DEFAULT_MISSIONS = {
    1: "‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢",
    2: "‡∏™‡∏∑‡∏ö‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡πà‡∏≥‡πÑ‡∏´‡πâ",
    3: "‡∏Ñ‡πâ‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏´‡∏ç‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á",
    4: "‡∏Ç‡∏≠‡πÄ‡∏ö‡∏≤‡∏∞‡πÅ‡∏™‡∏à‡∏≤‡∏Å‡∏™‡∏¥‡πà‡∏á‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå/‡∏£‡∏π‡∏õ‡πÄ‡∏Ñ‡∏≤‡∏£‡∏û",
    5: "‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Å‡∏±‡∏ö‡∏ß‡∏¥‡∏ç‡∏ç‡∏≤‡∏ì‡πÅ‡∏•‡∏∞‡∏ó‡∏≤‡∏á‡∏õ‡∏•‡∏î‡∏õ‡∏•‡πà‡∏≠‡∏¢",
    6: "‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏¥‡∏ò‡∏µ/‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö",
    7: "‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡∏ú‡πà‡∏≤‡∏ô‡∏î‡πà‡∏≤‡∏ô‡∏ú‡∏ô‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÇ‡∏ö‡∏£‡∏≤‡∏ì",
    8: "‡πÑ‡∏Ç‡∏õ‡∏£‡∏¥‡∏®‡∏ô‡∏≤‡πÉ‡∏ô‡∏ñ‡πâ‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏Å",
    9: "‡∏´‡∏•‡∏ö‡∏´‡∏•‡∏µ‡∏Å‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏Å",
    10:"‡∏´‡∏•‡∏∏‡∏î‡∏û‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏´‡∏∏‡∏ö‡πÄ‡∏Ç‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡∏â‡∏≤‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå",
}

GM_SYSTEM_PROMPT = """‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI Game Master ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡∏°‡∏™‡∏¢‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡πÅ‡∏ô‡∏ß‡πÑ‡∏ó‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á "‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡πà‡∏≥‡πÑ‡∏´‡πâ‡πÅ‡∏´‡πà‡∏á‡πÄ‡∏ß‡∏µ‡∏¢‡∏á‡∏´‡∏•‡πà‡∏°"

‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:
1. ‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏¢‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏Ç‡∏ô‡∏•‡∏∏‡∏Å ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®‡∏´‡∏•‡∏≠‡∏ô
2. ‡πÉ‡∏ä‡πâ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≠‡∏¢‡∏•‡∏π‡∏Å‡πÄ‡∏ï‡πã‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå
3. ‡πÉ‡∏´‡πâ‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
4. ‡πÄ‡∏Å‡πá‡∏ö‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤
5. ‡πÑ‡∏°‡πà‡∏û‡∏π‡∏î‡∏ô‡∏≠‡∏Å‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®

‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏ú‡∏•‡∏•‡∏π‡∏Å‡πÄ‡∏ï‡πã‡∏≤:
- fail (1-5): ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏‡∏£‡πâ‡∏≤‡∏¢ ‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢‡∏°‡∏≤‡∏Å HP ‡∏•‡∏î
- neutral (6-10): ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢ ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏µ‡∏¢
- success (11-15): ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡πÑ‡∏î‡πâ‡πÄ‡∏ö‡∏≤‡∏∞‡πÅ‡∏™
- great (16-20): ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏° ‡πÑ‡∏î‡πâ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•/‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°

‡∏™‡∏¥‡πà‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:
- ‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏™‡∏¢‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡πÑ‡∏ó‡∏¢ ‡∏°‡∏µ‡πÄ‡∏á‡∏≤‡∏°‡∏∑‡∏î ‡∏ß‡∏¥‡∏ç‡∏ç‡∏≤‡∏ì ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≠‡∏ô
- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏∂‡∏á‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
- ‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
- ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏Ç‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡πÅ‡∏•‡∏∞‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢
"""

# ===================== Data model =====================

@dataclass
class AIResult:
    narration: str
    hp_delta: int = 0
    mp_delta: int = 0
    grant_heal: int = 0
    grant_boost: int = 0
    status: List[str] = None
    extra: Dict[str, Any] = None

    def to_attrs(self) -> Dict[str, Any]:
        d = asdict(self)
        if d.get("status") is None: d["status"] = []
        if d.get("extra")  is None: d["extra"]  = {}
        return d

# ===================== Groq helpers =====================

def _default_groq_client() -> Optional["Groq"]:
    api_key = os.getenv("api_key")
    if Groq is None or not api_key:
        return None
    try:
        return Groq(api_key=api_key)
    except Exception:
        return None

def _build_user_prompt(payload: Dict[str, Any]) -> str:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GM"""
    scene_idx = payload.get("scene_index", 1)
    scene_title = payload.get("scene_title", "")
    mission = payload.get("mission", "")
    progress = payload.get("progress", 1)
    action = payload.get("action_text", "")
    
    player = payload.get("player", {})
    roll = payload.get("roll", {})
    
    hp = player.get("hp", 100)
    hp_max = player.get("HP_MAX", 100)
    mp = player.get("mp", 10)
    pot_heal = player.get("pot_heal", 0)
    pot_boost = player.get("pot_boost", 0)
    
    dice_roll = roll.get("dice_roll", 10)
    tier = roll.get("tier", "neutral")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á context ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI
    prompt = f"""‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏â‡∏≤‡∏Å‡∏ó‡∏µ‡πà {scene_idx}/10 ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏°

**‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:** {scene_title}
**‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à:** {mission}
**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤:** {progress}/10

**‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô:**
- HP: {hp}/{hp_max}
- MP: {mp}
- Heal Potion: {pot_heal}
- Boost Charm: {pot_boost}

**‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô:** "{action}"

**‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≠‡∏¢‡∏•‡∏π‡∏Å‡πÄ‡∏ï‡πã‡∏≤:**
- ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏≠‡∏¢‡πÑ‡∏î‡πâ: {dice_roll}/20
- ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: {tier}

‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
{{
  "narration": "‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö:\n**[‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà]:** ...\n**[‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå]:** (3-5 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ ‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏π‡∏Å‡πÄ‡∏ï‡πã‡∏≤)\n**[‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£]:**\n**‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û:** ...\n**‡∏™‡∏ï‡∏¥:** ...\n**‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°:** ...\n**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à:** [{progress}/10]\n**[‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô]:** ...\n**[‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å]:**\n* A. ...\n* B. ...\n* C. ...",
  "hp_delta": 0,
  "mp_delta": 0,
  "grant_heal": 0,
  "grant_boost": 0,
  "status": [],
  "extra": {{}}
}}

**‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á narration:**
1. ‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏•‡∏π‡∏Å‡πÄ‡∏ï‡πã‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
2. ‡∏ñ‡πâ‡∏≤ fail ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢ HP ‡∏•‡∏î‡∏•‡∏á (-5 ‡∏ñ‡∏∂‡∏á -15)
3. ‡∏ñ‡πâ‡∏≤ great ‡πÉ‡∏´‡πâ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• ‡πÄ‡∏ä‡πà‡∏ô grant_boost: 1
4. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®‡∏™‡∏¢‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç ‡∏°‡∏µ‡πÄ‡∏á‡∏≤‡∏°‡∏∑‡∏î ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏õ‡∏£‡∏∞‡∏´‡∏•‡∏≤‡∏î
5. ‡πÉ‡∏´‡πâ‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 3 ‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå

**‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û:** {_health_label(hp, hp_max)}
**‡∏™‡∏ï‡∏¥:** {_sanity_label(tier)}

‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô"""
    
    return prompt

def _health_label(hp: int, hp_max: int) -> str:
    r = hp / max(1, hp_max)
    if r >= 2/3: return "‡∏õ‡∏Å‡∏ï‡∏¥"
    if r >= 1/3: return "‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
    return "‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏™‡∏≤‡∏´‡∏±‡∏™"

def _sanity_label(tier: str) -> str:
    if tier in ("great","success"): return "‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á"
    if tier == "neutral": return "‡∏´‡∏ß‡∏≤‡∏î‡∏£‡∏∞‡πÅ‡∏ß‡∏á"
    return "‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏™‡∏ï‡∏¥"

def _extract_json(text: str) -> Optional[Dict[str, Any]]:
    """‡πÅ‡∏¢‡∏Å JSON ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
    if not text:
        return None
    
    # ‡∏•‡∏ö markdown code blocks
    text = re.sub(r"^```(?:json)?\s*|\s*```$", "", text.strip(), flags=re.IGNORECASE)
    
    # ‡∏´‡∏≤ JSON object
    m = re.search(r"\{.*\}", text, flags=re.DOTALL)
    if not m:
        return None
    
    try:
        return json.loads(m.group(0))
    except Exception:
        return None

def call_llm_narrator(payload: Dict[str, Any],
                      *,
                      groq_client: Optional["Groq"]=None,
                      model: Optional[str]=None,
                      temperature: float=0.7,
                      timeout_s: int=30) -> Optional[Dict[str, Any]]:
    """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å AI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á narration"""
    client = groq_client or _default_groq_client()
    if client is None:
        print("‚ùå Groq client is None - check API key in .env file")
        return None

    # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏≠‡∏∑‡πà‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏
    model_name = model or "openai/gpt-oss-20b"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å openai/gpt-oss-20b
    
    messages = [
        {"role": "system", "content": GM_SYSTEM_PROMPT},
        {"role": "user", "content": _build_user_prompt(payload)}
    ]

    try:
        print(f"üì° Calling Groq API with model: {model_name}")
        
        resp = client.chat.completions.create(
            model=model_name,
            messages=messages,
            temperature=temperature,
            max_tokens=1000,
            timeout=timeout_s,
        )
        
        if not resp or not resp.choices:
            print("‚ùå No response from API")
            return None
            
        content = resp.choices[0].message.content
        print(f"üìù AI Response length: {len(content)} chars")
        print(f"üìÑ First 200 chars: {content[:200]}")
        
        result = _extract_json(content)
        if result:
            print("‚úÖ JSON extracted successfully")
        else:
            print("‚ùå Failed to extract JSON from response")
            print(f"Full response: {content}")
        
        return result
        
    except Exception as e:
        print(f"‚ùå AI Error: {type(e).__name__}: {e}")
        import traceback
        traceback.print_exc()
        return None

# ===================== Baseline (no-LLM fallback) =====================

def _choices_for_scene(scene_idx: int) -> List[str]:
    mapping = {
        1: ["‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡πâ‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏ö‡∏ñ‡∏ô‡∏ô", "‡∏•‡∏±‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏á‡∏´‡∏ç‡πâ‡∏≤‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤", "‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡∏ñ‡∏ô‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏´‡∏°‡∏≠‡∏Å"],
        2: ["‡∏Ñ‡πâ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Å‡πà‡∏≤", "‡∏ü‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏•‡∏°/‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡πâ‡∏≠‡∏á", "‡∏ï‡∏≤‡∏°‡∏£‡∏≠‡∏¢‡πÄ‡∏ó‡πâ‡∏≤‡πÑ‡∏õ‡∏ï‡∏£‡∏≠‡∏Å‡πÅ‡∏Ñ‡∏ö"],
        3: ["‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏ï‡∏π‡πâ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£", "‡πÄ‡∏Ñ‡∏≤‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö", "‡πÅ‡∏á‡πâ‡∏°‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏´‡πâ‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á"],
        4: ["‡∏à‡∏∏‡∏î‡∏ò‡∏π‡∏õ‡∏Ç‡∏≠‡∏ó‡∏≤‡∏á", "‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏≠‡∏∏‡πÇ‡∏ö‡∏™‡∏ñ", "‡∏™‡πà‡∏≠‡∏á‡∏£‡∏π‡∏õ‡πÄ‡∏Ñ‡∏≤‡∏£‡∏û‡∏´‡∏≤‡πÄ‡∏ö‡∏≤‡∏∞‡πÅ‡∏™"],
        5: ["‡∏≠‡πà‡∏≤‡∏ô‡∏õ‡πâ‡∏≤‡∏¢‡∏´‡∏•‡∏∏‡∏°‡∏®‡∏û", "‡∏ß‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡πà‡∏ô", "‡∏°‡∏≠‡∏á‡∏´‡∏≤‡∏î‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏ñ‡∏π‡∏Å‡∏£‡∏ö‡∏Å‡∏ß‡∏ô"],
        6: ["‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏ó‡πà‡∏ô‡∏û‡∏¥‡∏ò‡∏µ", "‡∏ä‡∏≥‡πÄ‡∏•‡∏∑‡∏≠‡∏á‡πÉ‡∏ï‡πâ‡∏ô‡πâ‡∏≥", "‡∏ü‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡∏£‡∏∞‡∏ã‡∏¥‡∏ö‡∏£‡∏¥‡∏°‡∏ô‡πâ‡∏≥"],
        7: ["‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏ö‡∏ô‡∏ú‡∏ô‡∏±‡∏á", "‡∏ß‡∏±‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ß‡∏ô", "‡∏•‡∏≠‡∏á‡∏ß‡∏≤‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏û‡∏¥‡∏ò‡∏µ"],
        8: ["‡∏Ñ‡∏•‡∏≥‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡∏•‡∏±‡∏ö", "‡∏™‡πà‡∏≠‡∏á‡πÄ‡∏û‡∏î‡∏≤‡∏ô‡∏´‡∏¥‡∏ô", "‡∏ü‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏´‡∏¢‡∏î‡∏ô‡πâ‡∏≥‡∏à‡∏±‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞"],
        9: ["‡∏ï‡∏≤‡∏°‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÄ‡∏¢‡πá‡∏ô", "‡∏ü‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏•‡∏°‡∏´‡∏ß‡∏ô", "‡∏´‡∏•‡∏ö‡∏ã‡πà‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô‡∏ù‡∏µ‡πÄ‡∏ó‡πâ‡∏≤"],
        10:["‡∏°‡∏∏‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏∏‡∏ö‡πÄ‡∏Ç‡∏≤", "‡∏°‡∏≠‡∏á‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏≤‡πÄ‡∏á‡∏≤‡∏ï‡∏≤‡∏°‡∏ï‡∏¥‡∏î", "‡∏ó‡∏≥‡∏û‡∏¥‡∏ò‡∏µ‡∏õ‡∏¥‡∏î‡∏â‡∏≤‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå"],
    }
    return mapping.get(scene_idx, ["‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡∏ß", "‡πÄ‡∏á‡∏µ‡πà‡∏¢‡∏´‡∏π‡∏ü‡∏±‡∏á", "‡∏Å‡πâ‡∏≤‡∏ß‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏ß‡∏±‡∏á"])

def _render_narration_template(
    *, scene_title: str, situation: str, health: str, sanity: str,
    items_text: str, progress: int, mission: str, choices: List[str]
) -> str:
    a, b, c = (choices + ["...", "...", "..."])[:3]
    return (
f"**[‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà]:** {scene_title}\n"
f"**[‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå]:** {situation}\n"
f"**[‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£]:**\n"
f"**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à:** [{progress}/10]\n"
f"**[‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô]:** {mission}\n"
f"**[‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å]:**\n"
f"* A. {a}\n"
f"* B. {b}\n"
f"* C. {c}"
    )

def baseline_from_tier(
    *, tier: str, action_text: str, scene_idx: int, player, progress: int
) -> AIResult:
    """Fallback ‡πÄ‡∏°‡∏∑‡πà‡∏≠ AI ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
    scene = SCENE_TITLES[scene_idx] or f"‡∏â‡∏≤‡∏Å‡∏ó‡∏µ‡πà {scene_idx}"
    mission = DEFAULT_MISSIONS.get(scene_idx, "‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏Ç‡∏õ‡∏£‡∏¥‡∏®‡∏ô‡∏≤")
    health = _health_label(player.hp, player.HP_MAX)
    sanity = _sanity_label(tier)
    items_text = f"Heal Potion √ó{player.pot_heal}, Boost Charm √ó{player.pot_boost}"
    choices = _choices_for_scene(scene_idx)

    if tier == "fail":
        situation = (
            f"‡∏Ñ‡∏∏‡∏ì‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° '{action_text}' ‡πÅ‡∏ï‡πà‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÄ‡∏á‡∏≤‡∏°‡∏∑‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ï‡∏±‡∏ß‡∏°‡∏≤‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á. "
            "‡∏•‡∏°‡πÄ‡∏¢‡πá‡∏ô‡πÄ‡∏â‡∏µ‡∏¢‡∏ö‡∏û‡∏±‡∏î‡∏™‡∏ß‡∏ô‡∏Å‡∏±‡∏ö‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏î‡∏¥‡∏ô‡∏ä‡∏∑‡πâ‡∏ô‡∏à‡∏ô‡∏™‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ä‡∏≤‡∏ß‡∏≤‡∏ö. "
            "‡∏ö‡∏≤‡∏á‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ù‡πâ‡∏≤‡∏°‡∏≠‡∏á‚Äî‡πÅ‡∏•‡∏∞‡∏°‡∏±‡∏ô‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà."
        )
        hp_delta = -8
        grant_boost = 0
    elif tier == "neutral":
        situation = (
            f"‡∏Ñ‡∏∏‡∏ì '{action_text}' ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏î‡∏π‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡∏á‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏£‡∏¥‡∏á. "
            "‡∏™‡∏≤‡∏¢‡∏´‡∏°‡∏≠‡∏Å‡∏ö‡∏î‡∏ö‡∏±‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏´‡∏¢‡∏î‡∏ô‡πâ‡∏≥‡∏Ñ‡∏≠‡∏¢‡∏Å‡∏ß‡∏ô‡πÉ‡∏à. "
            "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡πà‡∏≠‡∏ï‡∏±‡∏ß."
        )
        hp_delta = 0
        grant_boost = 0
    elif tier == "success":
        situation = (
            f"‡∏Ñ‡∏∏‡∏ì‡∏•‡∏á‡∏°‡∏∑‡∏≠ '{action_text}' ‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏â‡∏µ‡∏¢‡∏ö‡∏Ñ‡∏° ‡πÄ‡∏á‡∏≤‡∏°‡∏∑‡∏î‡∏ñ‡∏≠‡∏¢‡∏´‡πà‡∏≤‡∏á‡πÑ‡∏õ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏π‡πà. "
            "‡πÄ‡∏ö‡∏≤‡∏∞‡πÅ‡∏™‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡πÇ‡∏ú‡∏•‡πà‡∏°‡∏≤‡πÉ‡∏ï‡πâ‡πÅ‡∏™‡∏á‡∏ü‡πâ‡∏≤‡πÅ‡∏•‡∏ö ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡∏Ç‡∏∂‡πâ‡∏ô. "
            "‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô ‡πÅ‡∏°‡πâ‡∏¢‡∏±‡∏á‡πÅ‡∏ù‡∏á‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢."
        )
        hp_delta = 0
        grant_boost = 0
    else:  # great
        situation = (
            f"‡∏Å‡∏≤‡∏£ '{action_text}' ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏à‡∏ô‡∏ô‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏´‡∏•‡∏≤‡∏î ‡πÄ‡∏á‡∏≤‡∏°‡∏∑‡∏î‡πÅ‡∏ï‡∏Å‡∏ã‡πà‡∏≤‡∏ô. "
            "‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏î‡∏µ‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏ï‡∏£‡∏á‡∏´‡∏ô‡πâ‡∏≤‚Äî‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡∏ó‡∏≤‡∏á‡∏•‡∏±‡∏ö/‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÄ‡∏ú‡∏¢‡∏ï‡∏±‡∏ß‡∏≠‡∏≠‡∏Å‡∏°‡∏≤. "
            "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏π‡∏î‡∏•‡∏°‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏•‡∏∂‡∏Å ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÑ‡∏´‡∏•‡∏Ñ‡∏∑‡∏ô‡∏™‡∏ï‡∏¥."
        )
        hp_delta = 0
        grant_boost = 1

    narration = _render_narration_template(
        scene_title=scene,
        situation=situation,
        health=health,
        sanity=sanity,
        items_text=items_text,
        progress=max(0, min(10, int(progress))),
        mission=mission,
        choices=choices,
    )
    
    return AIResult(
        narration=narration,
        hp_delta=hp_delta,
        mp_delta=0,
        grant_heal=0,
        grant_boost=grant_boost,
        status=[],
        extra={"scene_title": scene, "mission": mission},
    )

# ===================== Entry point =====================

def resolve_effects(
    *,
    session,
    player,
    roll,
    action_text: str,
    kind: str,
    groq_client: Optional["Groq"]=None,
    model: Optional[str]=None,
) -> AIResult:
    """‡πÉ‡∏ä‡πâ AI ‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á narration"""
    scene_idx = max(1, min(10, int(session.stage_index)))
    scene_title = SCENE_TITLES[scene_idx] or f"‡∏â‡∏≤‡∏Å‡∏ó‡∏µ‡πà {scene_idx}"
    mission = DEFAULT_MISSIONS.get(scene_idx, "‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏Ç‡∏õ‡∏£‡∏¥‡∏®‡∏ô‡∏≤")
    progress = max(1, min(10, int(session.turn)))

    payload = {
        "scene_index": scene_idx,
        "scene_title": scene_title,
        "mission": mission,
        "progress": progress,
        "kind": kind,
        "player": {
            "hp": player.hp, 
            "mp": player.mp,
            "pot_heal": player.pot_heal, 
            "pot_boost": player.pot_boost,
            "HP_MAX": player.HP_MAX, 
            "MP_MAX": player.MP_MAX,
        },
        "roll": {
            "dice_roll": roll.dice_roll,
            "total": roll.total_roll,
            "tier": roll.tier,
            "mp_spent": roll.mp_spent,
            "boost_applied": roll.boost_applied,
        },
        "action_text": action_text,
    }

    # ‡∏•‡∏≠‡∏á call AI ‡∏Å‡πà‡∏≠‡∏ô
    print(f"üé≤ Calling AI for scene {scene_idx}...")
    data = call_llm_narrator(payload, groq_client=groq_client, model=model)
    
    if data and isinstance(data, dict) and "narration" in data:
        print("‚úÖ AI response received!")
        ai = AIResult(
            narration=str(data.get("narration") or ""),
            hp_delta=int(data.get("hp_delta") or 0),
            mp_delta=int(data.get("mp_delta") or 0),
            grant_heal=int(data.get("grant_heal") or 0),
            grant_boost=int(data.get("grant_boost") or 0),
            status=list(data.get("status") or []),
            extra=dict({"scene_title": scene_title, "mission": mission, **(data.get("extra") or {})}),
        )
        return _validated(ai, player)

    # Fallback ‡∏ñ‡πâ‡∏≤ AI ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    print("‚ö†Ô∏è AI failed, using baseline...")
    return _validated(baseline_from_tier(
        tier=roll.tier, 
        action_text=action_text,
        scene_idx=scene_idx, 
        player=player, 
        progress=progress
    ), player)

def _validated(ai: AIResult, player) -> AIResult:
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡πà‡∏≤"""
    ai.hp_delta = max(-50, min(50, int(ai.hp_delta)))
    ai.mp_delta = max(-10, min(10, int(ai.mp_delta)))
    
    if player.mp + ai.mp_delta < 0:
        ai.mp_delta = -player.mp
    
    ai.grant_heal  = max(0, min(2, int(ai.grant_heal)))
    ai.grant_boost = max(0, min(2, int(ai.grant_boost)))
    
    if ai.status is None:
        ai.status = []
    if ai.extra is None:
        ai.extra = {}
    
    return ai